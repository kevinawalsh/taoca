// Code generated by protoc-gen-go.
// source: ca.proto
// DO NOT EDIT!

/*
Package taoca is a generated protocol buffer package.

It is generated from these files:
	ca.proto

It has these top-level messages:
	X509Details
	CSR
	Request
	Cert
	Response
*/
package taoca

import proto "github.com/golang/protobuf/proto"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type ResponseStatus int32

const (
	ResponseStatus_TAOCA_OK             ResponseStatus = 0
	ResponseStatus_TAOCA_BAD_REQUEST    ResponseStatus = 1
	ResponseStatus_TAOCA_REQUEST_DENIED ResponseStatus = 2
	ResponseStatus_TAOCA_ERROR          ResponseStatus = 3
)

var ResponseStatus_name = map[int32]string{
	0: "TAOCA_OK",
	1: "TAOCA_BAD_REQUEST",
	2: "TAOCA_REQUEST_DENIED",
	3: "TAOCA_ERROR",
}
var ResponseStatus_value = map[string]int32{
	"TAOCA_OK":             0,
	"TAOCA_BAD_REQUEST":    1,
	"TAOCA_REQUEST_DENIED": 2,
	"TAOCA_ERROR":          3,
}

func (x ResponseStatus) Enum() *ResponseStatus {
	p := new(ResponseStatus)
	*p = x
	return p
}
func (x ResponseStatus) String() string {
	return proto.EnumName(ResponseStatus_name, int32(x))
}
func (x *ResponseStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ResponseStatus_value, data, "ResponseStatus")
	if err != nil {
		return err
	}
	*x = ResponseStatus(value)
	return nil
}

type X509Details struct {
	CommonName         *string `protobuf:"bytes,1,opt,name=common_name" json:"common_name,omitempty"`
	Country            *string `protobuf:"bytes,2,opt,name=country" json:"country,omitempty"`
	State              *string `protobuf:"bytes,3,opt,name=state" json:"state,omitempty"`
	City               *string `protobuf:"bytes,4,opt,name=city" json:"city,omitempty"`
	Organization       *string `protobuf:"bytes,5,opt,name=organization" json:"organization,omitempty"`
	OrganizationalUnit *string `protobuf:"bytes,6,opt,name=organizational_unit" json:"organizational_unit,omitempty"`
	SerialNumber       *int32  `protobuf:"varint,7,opt,name=serial_number" json:"serial_number,omitempty"`
	XXX_unrecognized   []byte  `json:"-"`
}

func (m *X509Details) Reset()         { *m = X509Details{} }
func (m *X509Details) String() string { return proto.CompactTextString(m) }
func (*X509Details) ProtoMessage()    {}

func (m *X509Details) GetCommonName() string {
	if m != nil && m.CommonName != nil {
		return *m.CommonName
	}
	return ""
}

func (m *X509Details) GetCountry() string {
	if m != nil && m.Country != nil {
		return *m.Country
	}
	return ""
}

func (m *X509Details) GetState() string {
	if m != nil && m.State != nil {
		return *m.State
	}
	return ""
}

func (m *X509Details) GetCity() string {
	if m != nil && m.City != nil {
		return *m.City
	}
	return ""
}

func (m *X509Details) GetOrganization() string {
	if m != nil && m.Organization != nil {
		return *m.Organization
	}
	return ""
}

func (m *X509Details) GetOrganizationalUnit() string {
	if m != nil && m.OrganizationalUnit != nil {
		return *m.OrganizationalUnit
	}
	return ""
}

func (m *X509Details) GetSerialNumber() int32 {
	if m != nil && m.SerialNumber != nil {
		return *m.SerialNumber
	}
	return 0
}

type CSR struct {
	// Public key for the certificate being requested, as a serialized
	// tao.CryptoKey.
	PublicKey []byte `protobuf:"bytes,1,req,name=public_key" json:"public_key,omitempty"`
	// Subject name details for the certificate being requested.
	Name *X509Details `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	// Requested duration for the certificate being requested.
	Years *int32 `protobuf:"varint,3,req,name=years" json:"years,omitempty"`
	// Whether the certificate being requested should have the IsCA flag set.
	IsCa             *bool  `protobuf:"varint,4,req,name=is_ca" json:"is_ca,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CSR) Reset()         { *m = CSR{} }
func (m *CSR) String() string { return proto.CompactTextString(m) }
func (*CSR) ProtoMessage()    {}

func (m *CSR) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *CSR) GetName() *X509Details {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *CSR) GetYears() int32 {
	if m != nil && m.Years != nil {
		return *m.Years
	}
	return 0
}

func (m *CSR) GetIsCa() bool {
	if m != nil && m.IsCa != nil {
		return *m.IsCa
	}
	return false
}

type Request struct {
	CSR              *CSR   `protobuf:"bytes,1,req" json:"CSR,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}

func (m *Request) GetCSR() *CSR {
	if m != nil {
		return m.CSR
	}
	return nil
}

type Cert struct {
	X509Cert         []byte `protobuf:"bytes,1,opt,name=x509_cert" json:"x509_cert,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Cert) Reset()         { *m = Cert{} }
func (m *Cert) String() string { return proto.CompactTextString(m) }
func (*Cert) ProtoMessage()    {}

func (m *Cert) GetX509Cert() []byte {
	if m != nil {
		return m.X509Cert
	}
	return nil
}

type Response struct {
	Status           *ResponseStatus `protobuf:"varint,1,req,name=status,enum=taoca.ResponseStatus" json:"status,omitempty"`
	ErrorDetail      *string         `protobuf:"bytes,2,opt,name=error_detail" json:"error_detail,omitempty"`
	Cert             []*Cert         `protobuf:"bytes,3,rep,name=cert" json:"cert,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}

func (m *Response) GetStatus() ResponseStatus {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return ResponseStatus_TAOCA_OK
}

func (m *Response) GetErrorDetail() string {
	if m != nil && m.ErrorDetail != nil {
		return *m.ErrorDetail
	}
	return ""
}

func (m *Response) GetCert() []*Cert {
	if m != nil {
		return m.Cert
	}
	return nil
}

func init() {
	proto.RegisterEnum("taoca.ResponseStatus", ResponseStatus_name, ResponseStatus_value)
}
